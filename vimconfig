" ===========================
" ====== basic setting ======
" ===========================
set encoding=utf8
set number
set relativenumber
set tabstop=4
" setting shift+>
set smartindent
set shiftwidth=4
set showcmd 
" setting backspace 
set backspace=indent,eol,start
"set system clipboard in vim
"set clipboard=unnamedplus
"set clipboard=unnamedplus
syntax on
set dictionary=/usr/share/dict/words
let g:mapleader = "<space>"

" ====== basic map setting ===
nnoremap <silent><c-e> :NERDTree<CR> 
nnoremap <silent><CR> o<ESC>
nnoremap > >>
nnoremap < <<

" ===========================
" ====== plugin install =====
" ===========================
call plug#begin('~/.vim/plugged')
" vimwiki
Plug 'vimwiki/vimwiki'
Plug 'hdima/python-syntax'
Plug 'tpope/vim-markdown'
Plug 'iamcco/markdown-preview.nvim'
Plug 'scrooloose/nerdtree'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'morhetz/gruvbox'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/syntastic'
Plug 'aperezdc/vim-template'
" vim code dark theme
" Plug 'tomasiser/vim-code-dark'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'puremourning/vimspector'
call plug#end()
" ====== markdown setting  =====
set nofoldenable

" ====== airline setting  =====
let g:airline_theme='simple'

" ====== syntastic setting  =====
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" ====== templates setting  =====
let g:templates_directory = '~/.vim/templates'

" ====== color setting  =====
"colorscheme codedark
" ====== coc setting =====
let g:coc_global_extensions = ['coc-json', 'coc-git', 'coc-html', 'coc-jedi']

"
" inoremap <expr> <TAB> coc#pum#visible() ? coc#pum#confirm() : "\<TAB>"
"
"=========== coc complete setting ===================
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

"------------------------------------------------
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"



"------------------------------------------------
inoremap <silent><expr> <c-o> coc#refresh()

"------------------------------------------------

"------------------------------------------------
" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)



"------------------------------------------------
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)



"------------------------------------------------
" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction


"------------------------------------------------
" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" ====== vimspector setting===
let g:vimspector_install_gadgets = [ 'debugpy', 'vscode-cpptools', 'CodeLLDB' ]
